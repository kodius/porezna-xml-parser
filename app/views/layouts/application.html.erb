<!DOCTYPE html>
<html>
  <head>
    <title>PoreznaXmlParser</title>
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>

    <%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track': 'reload' %>
    <%= javascript_pack_tag 'application', 'data-turbolinks-track': 'reload' %>
  </head>

  <body>
    <%= yield %>
  </body>
</html>

<script>
document.addEventListener("DOMContentLoaded", function() {
function ekUpload(){
    function Init() {

      console.log("Upload Initialised");
      var fileList = [];
      var fileSelect    = document.getElementById('file-upload'),
          fileDrag      = document.getElementById('file-drag'),
          submitButton  = document.getElementById('file-upload-form');
          fileListDisplay = document.getElementById('file-list-display');

      fileSelect.addEventListener('change', fileSelectHandler.bind(null, fileList), false);

      // Is XHR2 available?
      var xhr = new XMLHttpRequest();
      if (xhr.upload) {
        // File Drop
        fileDrag.addEventListener('dragover', fileDragHover, false);
        fileDrag.addEventListener('dragleave', fileDragHover, false);
        fileDrag.addEventListener('drop', fileSelectHandler.bind(null, fileList), false);
        submitButton.addEventListener('submit', prepareUploadFiles.bind(null,fileList), false)
      }
    }

    function fileDragHover(e) {
      var fileDrag = document.getElementById('file-drag');

      e.stopPropagation();
      e.preventDefault();

      fileDrag.className = (e.type === 'dragover' ? 'hover' : 'modal-body file-upload');
    }

    function fileSelectHandler(fileList, e) {
      // Fetch FileList object
      var files = e.target.files || e.dataTransfer.files;
      var fileSelect    = document.getElementById('file-upload')
      fileSelect.files = files;
      // Cancel event and hover styling
      fileDragHover(e);

      // Process all File objects
      for(var i = 0; i < files.length; i++) {
        fileList.push(files[i]);
        parseFile(files[i]);
         // uploadFile(f);
      }
      renderFileList(fileList);
    }

    // Output
    function output(msg) {
      // Response
      var m = document.getElementById('messages');
      // m.innerHTML = msg;
    }

    function parseFile(file) {

      // var fileType = file.type;
      // console.log(fileType);
      var imageName = file.name;
      var isGood = (/\.(?=xml|jpg|png|jpeg|xml)/gi).test(imageName);
      if (isGood) {
        // document.getElementById('start').classList.add("hidden");
        // document.getElementById('response').classList.remove("hidden");
        // document.getElementById('notimage').classList.add("hidden");
        // Thumbnail Preview
        // document.getElementById('file-image').classList.remove("hidden");
        // document.getElementById('file-image').src = URL.createObjectURL(file);
      }
      else {
        // document.getElementById('file-image').classList.add("hidden");
        document.getElementById('notimage').classList.remove("hidden");
        document.getElementById('start').classList.remove("hidden");
        document.getElementById('response').classList.add("hidden");
        document.getElementById("file-upload-form").reset();
      }
    }

    function setProgressMaxValue(e) {
      var pBar = document.getElementById('file-progress');

      if (e.lengthComputable) {
        pBar.max = e.total;
      }
    }

    function updateFileProgress(e) {
      var pBar = document.getElementById('file-progress');

      if (e.lengthComputable) {
        pBar.value = e.loaded;
      }
    }

    function prepareUploadFiles(files, evnt) {
      // evnt.preventDefault();
      files.forEach(function (file) {
        debugger;
        uploadFile(file);
      });
    }

    function uploadFile(file) {
      console.log('wwwwwwwww')
      var xhr = new XMLHttpRequest();
      var formData = new FormData();
      formData.append('fileUpload', file);
      //  var data = new FormData()
      // formData.append('fileUpload[]', file)

      if (xhr.upload) {
        // Check if file is less than x MB
        if (true) {
          // Progress bar
          // pBar.style.display = 'inline';
          // xhr.upload.addEventListener('loadstart', setProgressMaxValue, false);
          // xhr.upload.addEventListener('progress', updateFileProgress, false);

          // File received / failed
          xhr.onreadystatechange = function(e) {
            if (xhr.readyState == 4) {
              console.log(xhr.status)
              // Everything is good!

              // progress.className = (xhr.status == 200 ? "success" : "failure");
              // document.location.reload(true);
            }
          };

          xhr.open('POST', document.getElementById('file-upload-form').action, true);
          xhr.setRequestHeader('X-File-Name', file.name);
          xhr.setRequestHeader('X-File-Size', file.size);
          // xhr.setRequestHeader('Content-Type', 'multipart/form-data');
          xhr.send(formData)
        } else {
          output('Please upload a smaller file (< ' + fileSizeLimit + ' MB).');
        }
      }
    }

    function renderFileList(fileList) {
      fileListDisplay.innerHTML = '';
      fileList.forEach(function (file, index) {
        var fileDisplayEl = document.createElement('p');
        fileDisplayEl.innerHTML = (index + 1) + ': ' + file.name;
        fileListDisplay.appendChild(fileDisplayEl);
      });
    };

    function pushToFileList() {

    }

    // Check for the various File API support.
    if (window.File && window.FileList && window.FileReader) {
      Init();
    } else {
      document.getElementById('file-drag').style.display = 'none';
    }
  }
  ekUpload();
  });
</script>